library(data.table)
a<- fread("C:/Program/Mongodb/bin/test.csv")
help(fread)
inst
install.packages("jsonlite")
help(json)
help(jsonlite)
?jsonlite
library(jsonlite)
winners <- fromJSON("C:/Program/Mongodb/bin/test.json", flatten = TRUE)
install.packages("rjson")
ibrary(data.table) library(rjson) a <- fread("C:/Program/Mongodb/bin/test.csv") winners <- fromJSON("C:/Program/Mongodb/bin/test.json", flatten = TRUE)
winners <- fromJSON("C:/Program/Mongodb/bin/test.json")
winners <- fromJSON(paste(readLines("C:/Program/Mongodb/bin/test.csv"), collapse = ""))
winners <- fromJSON(paste(readLines("C:/Program/Mongodb/bin/test.json"), collapse = ""))
winners$guba_name
winners <- fromJSON("C:/Program/Mongodb/bin/test.json", collapse = ""))
help(fromJSON)
library(jsonlite)
library(rjson)
winners <- fromJSON("C:/Program/Mongodb/bin/test.json", collapse = "")
winners <- fromJSON("C:/Program/Mongodb/bin/test.json")
library(jsonlite)
winners <- fromJSON("C:/Program/Mongodb/bin/test.json")
unloadNamespace("rjson")
library(jsonlite)
winners <- fromJSON("C:/Program/Mongodb/bin/test.json")
winners <- fromJSON("C:/Program/Mongodb/bin/test.json", flatten = TRUE)
winners <- fromJSON("C:/Program/Mongodb/bin/test.json", flatten = TRUE)
install.packages("mongolite")
library(mongolite)
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://192.168.1.54:27017")
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb//localhost:27017")
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017")
rm(winners, envir = as.environment(".GlobalEnv"))
library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
library(data.table)
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
rapply
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
library(data.table) library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
library(data.table) library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "post_id"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
(data.table) library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "post_id"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
install.packages("data.table")
install.pacakges("mongolite")
install.packages("mongolite")
install.packages("stringr")
install.packages("quanteda")
install.packages("dplyr")
library(data.table) library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "post_id"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
help(chunk)
#a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "post_id"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)]
install.packages("pryr")
library(data.table) library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply":0}')
flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "post_id"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)]
lat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "post_id"), eval) }
news <- data.table()
hile (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) }
while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)]
chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)
help(rapply)
library(data.table) library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "post_id"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
library(data.table) library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
news
library(jsonlite)
help(fromJSON)
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json")
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json")
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json")
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json")
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json")
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json")
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json", flatten = TRUE)
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json", flatten = TRUE)
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json", flatten = TRUE)
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json", flatten = TRUE)
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json", flatten = TRUE)
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json", flatten = TRUE)
conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json", flatten = TRUE)
test <- fread("C:/SNT/SNT/Test", header = TRUE)
test <- fread("C:/SNT/SNT/Test", header = TRUE)
a <- fread("C:/SNT/SNT/Test", header = TRUE)
test <- fread("C:/SNT/SNT/test.csv", header = TRUE)
test <- fread("C:/SNT/SNT/Test/test.csv", header = TRUE)
drop(test(row(1:2)))
drop(row(1:2))
test <- test[-c(1,2),]
test <- test[-c(258,1299),]
test <- test[-c(258,1297),]
stn<-rename(test[,5])
stn<-setname(test[,5])
stn<- setnames(test[,5])
setnames(test, stkcd, stkn)
rm([[5]], envir = as.environment(".GlobalEnv"))
test <- fread("C:/SNT/SNT/Test/test.csv", header = TRUE) test <- test[-c(1, 2),]
test1 <- data.table(test$stkname)
test2 <- data.table(test[1:4,])
rm(test2)
test2 <- data.table(test[,1:4])
setnames(test1, stkname, stkcd)
test1 <- data.table(test[,5])
setnames(test1, stkname, stkcd)
?setnames
setnames(test1, "stkname", "stkcd")
setnames(test1, "Stkname", "Stkcd")
test<-merge(test1, test2, by = "Stkcd")
test <- fread("C:/SNT/SNT/Test/test.csv", header = TRUE) test <- test[-c(1, 2),] test1 <- data.table(test[,5]) test2 <- data.table(test[,1:4]) setnames(test1, "Stkname", "Stkcd")
test2 <- as.data.table(test[,1:4])
test1 <- as.data.table(test[,5])
test1[test2, ,by = "Stkcd"]
test1[test2, ,by = Stkcd]
test_merge<- test1[, test2,by = Stkcd]
test_merge<- test1[, test2,by = "Stkcd"]
test_merge<- test1[, test2,by = .Stkcd]
setnames(test1, "Stkname", "Stkcd")
test_merge<- test1[, test2,by = test1$Stkcd]
test_merge<- test1[, test2,by = Stkcd]
test_merge<- test1[, test2[,1:4],by = Stkcd]
rm([[2]], envir = as.environment(".GlobalEnv"))
rm
rm(test_merge)
test_merge<- test1[, test2[,1:4],by = Stkcd]
test_merge<- test1[test2, on = "Stkcd",nomatch = 0]
test_merge<- test2[test1, on = "Stkcd",nomatch = 0]
test_merge<- test1[test2, on = "Stkcd",nomatch = 0]
test_merge<- test1[test2, by = "Stkcd",nomatch = 0]
test_merge <- test1[test2,, by = "Stkcd"]
head(test1[,Shrchgdt:=NA][,Shrtyp:=NA][,Nshrttl:=NA])
test_merge <- test1[test2,on="Stkcd", nomatch = 0]
match(test1, test2)
test.merge<-match(test1, test2)
rm(test.merge)
test_merge <- test1[test2, on = "Stkcd", nomatch = 0]
test_merge <- test1[test2, on = c(Stkcd, Shrchgdt, Shrtyp, Nshrttl), nomatch = 0]
test_merge <- test1[test2, on = c("Stkcd", "Shrchgdt", "Shrtyp", "Nshrttl"), nomatch = 0]
test_merge <- test1[test2, on = "Stkcd", nomatch = 0, allow.cartesian = TRUE]
rm(test1)
rm(test_merge)
test1 <- as.data.table(test[, 5])
rm(test1,test2)
test1 <- as.data.table(test[, 5])
test2 <- as.data.table(test[, 1:4])
rm(test1, test2)
test <- test[, shrtyp:= ifelse((Stkcd = Stkname), Shrtyp, NA)]
install.packages("dplyr")
library(dplyr)
test <- fread("C:/SNT/SNT/Test/test.csv", header = TRUE)
test <- test[-c(1, 2),]
test1 <- as.data.table(test[, 5])
test2 <- as.data.table(test[, 1:4])
test_merge <- test1[test2, on = "Stkcd", nomatch = NA, allow.cartesian = TRUE]
setnames(test1, "Stkname", "Stkcd")
test_merge <- test1[test2, on = "Stkcd", nomatch = NA, allow.cartesian = TRUE]
test2 <-as.data.table(test2[1:257,])
test_merge <- test1[test2, on = "Stkcd", nomatch = NA, allow.cartesian = TRUE]
test_merge <- test1[test2, on = "Stkcd", nomatch = NA]
test_merge <- test2[test1, on = "Stkcd", nomatch = NA]
fwrite(test_merge, file = "test.csv")
library(jsonlite)
a<- fromJSON("C:/Program/Mongodb/bin/data/test.json")
install.packages("ndjson")
library(ndjson)
json_file <- stream_in(file("C:/Program/Mongodb/bin/data/test.json"))
json_file <- stream_in("C:/Program/Mongodb/bin/data/test.json")
install.packages("textreg")
library(ndjson)
json_file <- stream_in("C:/Program/Mongodb/bin/data/test.json")
help(stream_in)
json_file <- stream_in("C:/Program/Mongodb/bin/data/test.json" )
guba <- json_file[, lapply(.SD, char2utf8)]
guba <- json_file[, lapply(.SD, char2utf8)]
rm
rm(guba, json_file)
totalstock <- fread("totalstock.csv", header = TRUE)
totalstock <- totalstock[-c(1,2), ]
seqreg <- fread("seqreg.csv", header = TRUE)
seqreg <- seqreg[-c(1,2), ]
stock_merge <- totalstock[seqreg, on = "Stkcd", nomatch = NA]
rm(seqreg, stock_merge, totalstock)
json_file <- stream_in("C:/Program/Mongodb/bin/data/test.json")
guba <- json_file[, lapply(.SD, char2utf8)]
library(data.table) library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") conn_1 <- fromJSON("C:/Program/Mongodb/bin/data/test.json", flatten = TRUE)  iter <- conn$iterate(query = '{}', field = '{"_id":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
rm(news, envir = as.environment(".GlobalEnv"))
json_file <- stream_in("C:/Program/Mongodb/bin/data/test1.json")
guba <- json_file[, lapply(.SD, char2utf8)]
json_file <- stream_in("C:/Program/Mongodb/bin/data/test.json")
guba <- json_file[, lapply(.SD, char2utf8)]
guba <- json_file[, lapply(, char2utf8)]
guba <- json_file[, lapply(.SD, char2utf8)]
json_file <- stream_in("C:/Program/Mongodb/bin/data/test.json", encoding = "utf-8")
ndjson
help(ndjson)
unloadNamespace("ndjson")
library("jsonlite", lib.loc="C:/Program/R/R-3.4.1/library")
json_file <- stream_in("C:/Program/Mongodb/bin/data/test.json")
json_file <- fromJSON("test.json")
json_file <- fromJSON(test)
json_file <- fromJSON(test.json)
json_file <- fromJSON("test.json")
json_file <- stream_in("test.json")
json_file <- stream_in(test.json)
json_file <- stream_in("C:/SNT/SNT/Test/Test/test.json")
unloadNamespace("jsonlite")
library(ndjson)
json_file <- stream_in("test.json")
rm(guba, envir = as.environment(".GlobalEnv"))
guba <- json_file[, lapply(.SD, char2utf8)]
library(data.table) library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) }
news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
iter <- json_file[,-1]
guba <- iter[, lapply(.SD, char2utf8)]
guba <- iter[, lapply(.SD, utf8)]
guba <- iter[, lapply(.SD, char2utf8)]
json_file <- stream_in("test.json")
iter <- json_file[,-1]
rm(guba, envir = as.environment(".GlobalEnv"))
guba <- iter[, lapply(.SD, char2utf8)]
library(data.table) library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
fwrite(news, file = "news.csv")
library(data.table) library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
library(data.table) library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
fwrite(news, file = "news.csv")
guba <- fread("news.csv", header = TRUE)
install.packages("texreg")
install.packages("data.table")
install
install.package("stringr")
install.packages("stringr")
install.packages("texreg")
install.packages("pryr")
install.packages("lubridate")
install.package('ggplot2')
install.packages("ggplot2")
library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk) fwrite(news, file = "news.csv")
install.packages("mongolite")
library(mongolite)
library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk) fwrite(news, file = "news.csv")
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"))[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
library(mongolite)
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "news_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"))[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
onn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"))[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
rm(reply, envir = as.environment(".GlobalEnv"))
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"))[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
library(mongolite) #a <- fread("C:/Program/Mongodb/bin/test.csv") conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } news <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     news <- rbindlist(list(news, chunk), use.names = T, fill = T) } news <- news[, lapply(.SD, char2utf8)] rm(iter, res, chunk) fwrite(news, file = "posts.csv")
rm(conn, envir = as.environment(".GlobalEnv"))
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"))[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
#import Gubapost reply conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"))[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
structure(1:5, comment = "my attribute")
help(structure)
a<- structure(1:5, comment = "my attribute")
attributes(a)
str(1:5, comment = "my attribute")
structure(1:5, comment = "my attribute")
df <- data.frame(x = 1:3, y = I(list(1:2, 1:3, 1:df)))
df <- data.frame(x = 1:3, y = I(list(1:2, 1:3, 1:4)))
df
df <- data.frame(x = 1:3, y = I(matrix(1:9, nrow = 3)))
df
str(df)
install.packages("dplyr")
help(lapply)
library(magrittr)
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"))[["reply_content"]] %>% rbindlist(.,use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"))[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk)
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"), fill = T)[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"), use.names =T, fill = T)[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"), use.names = T, fill = F)[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"), fill = F)[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"), fill = T)[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"))[["reply_content"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "reply.reply_content":1, "reply.reply_author":1, "reply.reply_time":1, "reply_quote_author":1, "reply_quote_time":1, "reply_quote_content":1, "post_id":1}') reply <- data.table() while (!is.null(res <- iter$batch(size = 1e5))) {     chunk <- rbindlist(lapply(res, `[[`, "reply"))[["reply_content"]][["reply_author"]] %>% rbindlist(use.names = T, fill = T)     reply <- rbindlist(list(reply, chunk), use.names = T, fill = T) } reply <- reply[, lapply(.SD, char2utf8)] rm(iter, res, chunk) # 使用fwrite写入csv文件 fwrite(reply, file = "reply.csv")
help(iterate)
conn <- mongo(collection = 'CrawlerGubaUserInfo', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } posts <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     posts <- rbindlist(list(posts, chunk), use.names = T, fill = T) } posts <- posts[, lapply(.SD, char2utf8)] rm(iter, res, chunk) fwrite(posts, file = "userinfo.csv")
library(mongolite)
conn <- mongo(collection = 'CrawlerGubaUserInfo', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } posts <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     posts <- rbindlist(list(posts, chunk), use.names = T, fill = T) } posts <- posts[, lapply(.SD, char2utf8)] rm(iter, res, chunk) fwrite(posts, file = "userinfo.csv")
conn <- mongo(collection = 'CrawlerGuba', db = 'test', url = "mongodb://localhost:27017") iter <- conn$iterate(query = '{}', field = '{"_id":0, "guba_url":0, "reply":0}') flat_list <- function(nest.list) {     lapply(rapply(nest.list, enquote, how = "unlist"), eval) } posts <- data.table() while (!is.null(res <- iter$batch(size = 1e2))) {     chunk <- lapply(res, flat_list) %>% rbindlist(use.names = T, fill = T)     posts <- rbindlist(list(posts, chunk), use.names = T, fill = T) } posts <- posts[, lapply(.SD, char2utf8)] rm(iter, res, chunk) fwrite(posts, file = "posts.csv")
rm(conn, envir = as.environment(".GlobalEnv"))
posts<-fread("posts.csv", header =T)
posts <- fread("posts.csv")
posts <- read.csv("posts.csv")
posts <- read.csv("posts.csv", header = T, sep =",")
posts <- read.csv(file="posts.csv", header = T, sep =",")
library(data.table)
library(stringr)
r.replys <- fread("replys.csv", header = T, encoding = "UTF-8", na.strings = "")
r.posts <- fread("posts.csv", header = T, encoding = "UTF-8", na.strings = "", fill = T)
r.posts <- r.posts[postnums != 0]
r.posts[!is.na(post_id), .N]
r.posts[guba_name == "螺纹钢吧", .N > unique(postnums)]
earl.posts <- r.posts[order(create_time), .SD[1], keyby = .(guba_name)]
late.replys <- r.replys[order(post_id, reply_time), .SD[.N], keyby = .(post_id, reply_time)]
r.replys[, reply_content := str_replace(reply_content, "<.+>", "")]
# Q4
int.data <- r.replys[r.posts, on = .(post_id), nomatch = 0]
int.data[, create_date := as.Date(create_time, "%Y-%m-%d")
][, create_time := str_replace_all(create_time, "[TZ]", " ")
][, create_time := as.POSIXct(create_time, format = "%Y-%m-%d %H:%M:%OS")]
tim <- CJ(create_date = seq(int.data[, min(create_date)], int.data[, max(create_date)], by = 'day'), guba_name = unique(int.data$guba_name))
int.data.ts <- int.data[tim, on = .(guba_name, create_date), nomatch = NA
][is.na(readnum) & is.na(replynum), ':='(readnum = 0, replynum = 0)]
mx.post <- r.posts[order(-replynum), .SD[1:10]
][, .(post_id, guba_name, readnum, replynum)]
mx.ba <- r.posts[, .(replynum = sum(replynum), readnum = sum(readnum)), keyby = .(guba_name)
][order(-replynum), .SD[1:10]]
library(pastecs)
stst.in <- r.posts[, .(replynum = replynum, readnum = readnum)]
stst.in <- stat.desc(stst.in)
library(dplyr)
r.posts[, cor.test(replynum, readnum)]
b <- r.posts[, lm(replynum ~ readnum)] %>% summary() %>% list() %>% lapply(`[[`, "coefficients") %>% lapply(`[`, c(2,8)) %>% unlist()
post.reg <- r.posts[, .(coef = coef(lm(replynum ~ readnum))[2], p.value = lm(replynum ~ readnum) %>% summary() %>% list() %>% lapply(`[[`, "coefficients") %>% lapply(`[`, 8) %>% unlist()), keyby = .(guba_name)
][p.value < 0.05, .N]
library(data.table)
a <- fread("C:/Users/Mr.Stylee/Desktop/HLD_Contrshr.csv", header = T)
a <- fread("C:/Users/Mr.Stylee/Desktop/HLD_Contrshr.csv", header = T, encoding = "UTF-8")
a <- fread("C:/Users/Mr.Stylee/Desktop/HLD_Contrshr.csv",header = T, encoding = "UTF-8")
?fread
a <- fread("C:/Users/Mr.Stylee/Desktop/HLD_Contrshr.csv",header = T, encoding = NULL)
a <- fread("C:/Users/Mr.Stylee/Desktop/HLD_Contrshr.csv",header = T, encoding = "Latin-1")
a <- fread("C:/Users/Mr.Stylee/Desktop/HLD_Contrshr.csv", header = T, encoding = "UTF-8")
a <- fread("C:/Users/Mr.Stylee/Desktop/HLD_Contrshr.csv", header = T, encoding = "UTF-8")
View(a)
a <- fread("C:/Users/Mr.Stylee/Desktop/HLD_Contrshr.csv", header = T, encoding = "UTF-8", na.string = "", fill = T)
b <- r.posts[, lm(replynum ~ readnum)] %>% summary() %>% list() %>% lapply(`[[`, "coefficients") %>% lapply(`[`, c(2,8)) %>% unlist()
# Q6.3
library(dplyr)
library(data.table)
library(stringr)
b <- r.posts[, lm(replynum ~ readnum)] %>% summary() %>% list() %>% lapply(`[[`, "coefficients") %>% lapply(`[`, c(2,8)) %>% unlist()
post.reg <- r.posts[, .(coef = coef(lm(replynum ~ readnum))[2], p.value = lm(replynum ~ readnum) %>% summary() %>% list() %>% lapply(`[[`, "coefficients") %>% lapply(`[`, 8) %>% unlist()), keyby = .(guba_name)
]
View(post.reg)
a <- r.posts[, .(p.value = lm(replynum ~ readnum) %>% summary())]
View(a)
View(a)
a
a <- r.posts[, .(p.value = lm(replynum ~ readnum) %>% summary() %>% list())]
View(a)
